// The MIT License (MIT)
//
// Copyright (c) 2007-2018 Broad Institute
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
apply plugin: 'java'
import org.apache.tools.ant.filters.ReplaceTokens

ext.moduleName = 'org.igv'
ext.mainClassName = 'org.broad.igv.ui.Main'

// Put the Java 11 build into a special dir to avoid accidental collisions.
// Despite this, it is recommended that Java 8 vs. 11 builds be run in different locations.
buildDir = 'build_java11'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/java11']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/main/resources-jlfgr-1_0']
            exclude "**/*LICENSE*", "**/META-INF"
        }
    }
}
configurations {
    jarsForClasspath
}

dependencies {
    // Exclude the JAXB Core & Runtime jars from the module path and instead load them on the classpath in 
    // order to avoid issues with split-packages.
    jarsForClasspath fileTree(dir: 'lib_java11', include: ['jaxb-core-2.3.0.1.jar', 'jaxb-runtime-2.3.0.1.jar'])
    compile fileTree(dir: 'lib', include: '*.jar') + fileTree(dir: 'lib_java11', include: '*.jar') - configurations.jarsForClasspath
    testCompile fileTree(dir: 'test/lib', include: '*.jar')
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.1'
}

// Gradle bug prevents us from generating Java 11 bytecode: https://github.com/gradle/gradle/issues/5120
// Workaround is to target Java 10 for now.
sourceCompatibility = 10
targetCompatibility = 10

processResources {
    // Set the current timestamp for release builds; pass in a blank property to enable (i.e. -Ptimestamp="" at CLI)
    if (timestamp.equals("")) { timestamp = new Date().format("MM/dd/yyyy hh:mm aa") }

    filesMatching('resources/about.properties') {
        filter (ReplaceTokens,
                tokens: [ VERSION: version, BUILD: buildNumber, DEFAULT_MASTER_RESOURCE_URL: dataServerUrl,
                          TIMESTAMP: timestamp, DEVELOPMENT: development ])
    }
}

jar {
    archiveName = 'igv.jar'
    manifest {
        attributes(
            "Permissions": "all-permissions",
            "Application-Name": "IGV",
            "Built-By": System.getProperty('user.name'),
            "Main-Class": mainClassName,
        )
    }
}

task tooljar(type: Jar, dependsOn: jar) {
    // This jar is the same as the client jar above, just a different jar name and manifest
    archiveName = 'igvtools.jar'
    from(sourceSets.main.output) { }
    
    manifest {
        attributes(
            "Implementation-Title": "IGVTools",
            "Built-By": System.getProperty('user.name'),
            "Main-Class": "org.broad.igv.tools.IgvTools",
        )
    }
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = configurations.jarsForClasspath
    }
}

tasks.withType(Test) {
    systemProperties = System.getProperties()
    systemProperties['java.awt.headless'] = 'true'
    systemProperties['make.fail'] = 'false'
    systemProperties['include.longrunning'] = 'false'
    systemProperties['ignore.ioexceptions'] = 'false'
    maxHeapSize = '2000m'
    forkEvery = 1
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path',  classpath.asPath, 
            '--add-modules', 'junit',
            '--add-modules', 'fest.swing',
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath, 
        ]
        classpath = configurations.jarsForClasspath
    }
}

test {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
            '-Dcom.sun.xml.bind.v2.bytecode.ClassTailor.noOptimize',
            '--module-path',  classpath.asPath, 
            '--add-modules', 'junit', 
            '--add-modules', 'fest.swing', 
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-reads', "$moduleName=junit", 
            '--add-reads', "$moduleName=fest.swing",
            '@scripts/java11/test_suite.args',
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir, sourceSets.main.output.resourcesDir).asPath, 
        ]
        classpath = configurations.jarsForClasspath
    }
}

task createDist(type: Copy, dependsOn: jar)  {
    from ('scripts/java11') {
        include 'igv.bat'
        include 'igv.command'
        include 'igv.sh'
        include 'igv_hidpi.sh'
        include 'igv.args'
        include 'readme.txt'
    }
    
    with copySpec {
        from ("lib") {
            include '*.jar'
        }
        from ("lib_java11") {
            include '*.jar'
            exclude 'jaxb-core-2.3.0.1.jar'
            exclude 'jaxb-runtime-2.3.0.1.jar'
        }
        from ("${buildDir}/libs") {
            include 'igv.jar'
        }
        
        into "lib"
    }
    
    with copySpec {
        from ("lib_java11") {
            include 'jaxb-core-2.3.0.1.jar'
            include 'jaxb-runtime-2.3.0.1.jar'
        }
        into "lib_classpath"
    }

    into "${buildDir}/IGV-dist"
}

task createDistZip(type: Zip, dependsOn: createDist) {
    archiveName = "IGV_${version}_java11.zip"
    destinationDir = file("${buildDir}/distZip")
    baseName = "IGV"
    from "${buildDir}/IGV-dist" exclude "*.bat"
    into createDistZip.baseName + "_${version}_java11"

    doLast {
        project.exec { commandLine('chmod', '775', createDistZip.archivePath ) }
    }
}

task createMacDist(type: Copy, dependsOn: createDist) {
    with copySpec {
        from ("scripts/mac.app") exclude "Contents/Info.plist.template"
        into "IGV_${version}_java11.app"
    }
    with copySpec {
        from ("scripts/java11/Info.plist.template")
        filter (ReplaceTokens, tokens: [ VERSION: version ])
        rename "Info.plist.template", "Info.plist"
        into "IGV_${version}_java11.app/Contents"
    }
    with copySpec {
        from ("${buildDir}/IGV-dist/lib") include '*.jar'
        into "IGV_${version}_java11.app/Contents/Java/lib"
    }
    with copySpec {
        from ("${buildDir}/IGV-dist/lib_classpath") include '*.jar'
        into "IGV_${version}_java11.app/Contents/Java/lib_classpath"
    }

    into "${buildDir}/IGV-Mac-dist"

    doLast {
        project.exec { commandLine('chmod', '775', "${buildDir}/IGV-Mac-dist/IGV_${version}_java11.app" ) }
    }
}

task createMacDistZip(type: Zip, dependsOn: createMacDist) {
    archiveName = "IGV_${version}_java11.app.zip"
    destinationDir = file("${buildDir}/distZip")
    from "${buildDir}/IGV-Mac-dist"
    
    doLast {
        project.exec { commandLine('chmod', '775', createMacDistZip.archivePath ) }
    }
}

task createWinDistZip(type: Zip, dependsOn: createDist) {
    archiveName = "IGV_Win_${version}_java11.zip"
    destinationDir = file("${buildDir}/distZip")
    baseName = "IGV_Win"
    from("${buildDir}/IGV-dist") {
        exclude "*.sh"
        exclude "igv.command"
    }
    into createWinDistZip.baseName + "_${version}_java11"

    doLast {
        project.exec { commandLine('chmod', '775', createWinDistZip.archivePath ) }
    }
}

task createToolsDist(type: Copy, dependsOn: tooljar)  {
    from ("scripts/java11") {
        include 'igvtools*'
        include 'igvtools*.bat'
        include 'igvtools*.command'
        include 'igv.args'
    }
    
    with copySpec {
        from ("${buildDir}/libs") {
            include 'igvtools.jar'
        }
        from ("lib") {
            include '*.jar'
        }
        from ("lib_java11") {
            include '*.jar'
            exclude 'jaxb-core-2.3.0.1.jar'
            exclude 'jaxb-runtime-2.3.0.1.jar'
        }
        into "lib"
    }
    
    with copySpec {
        from ("lib_java11") {
            include 'jaxb-core-2.3.0.1.jar'
            include 'jaxb-runtime-2.3.0.1.jar'
        }
        into "lib_classpath"
    }

    with copySpec { from ("genomes") { } into "genomes" }

    into "${buildDir}/IGVTools-dist"
}

task createToolsDistZip(type: Zip, dependsOn: createToolsDist) {
    archiveName = "igvtools_${version}_java11.zip"
    destinationDir = file("${buildDir}/distZip")
    baseName = "IGVTools"
    
    from "${buildDir}/IGVTools-dist"
    into createToolsDistZip.baseName + "_${version}_java11"

    doLast {
        project.exec { commandLine('chmod', '775', createToolsDistZip.archivePath ) }
    }
}

build.dependsOn createDistZip,createMacDistZip,createWinDistZip,createToolsDistZip
